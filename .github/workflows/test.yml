name: Tests

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  tests:
    env:
      NPROC: 2
    strategy:
      fail-fast: false
      matrix:
        platform:
          - {
            icon: 🏁,
            os: windows,
            shell: msys2,
            pcre_include: /mingw64/include,
            pcre_lib: /mingw64/lib,
            ssl_include: /mingw64/include/openssl,
            ssl_lib: /mingw64/lib,
          }
          - {
            icon: 🍎,
            os: macos,
            shell: bash --noprofile --norc -eo pipefail,
            pcre_include: /usr/local/opt/pcre/include,
            pcre_lib: /usr/local/opt/pcre/lib,
            ssl_include: /usr/local/opt/openssl/include,
            ssl_lib: /usr/local/opt/openssl/lib,
          }
          - {
            icon: 🐧,
            os: ubuntu,
            shell: bash --noprofile --norc -eo pipefail,
            pcre_include: ,
            pcre_lib: ,
            ssl_include: ,
            ssl_lib: ,
          }
        pcre:    [ true, false ]
        sqlite:  [ true, false ]
        openssl: [ true, false ]
    name: ${{ matrix.platform.icon }} - PCRE ${{ matrix.pcre }} | SQLITE ${{ matrix.sqlite }} | SSL ${{ matrix.openssl }}
    runs-on: ${{ matrix.platform.os }}-latest
    defaults:
      run:
        shell: ${{ matrix.platform.shell }} {0}

    steps:

      - name: Link Homebrew OpenSSL 1.1 to /usr/local/opt/openssl
        if: matrix.platform.os == 'macos'
        run: |
            rm -f /usr/local/opt/openssl
            ln -s /usr/local/opt/openssl@1.1 /usr/local/opt/openssl

      - uses: msys2/setup-msys2@v2
        if: matrix.platform.os == 'windows'
        with:
          msystem: MINGW64
          update: true
          install: >
            base-devel
            git
            unzip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-pcre

      # temporary workaround for: https://github.com/golang/go/issues/42565
      - name: Fetch Go v1.14.11
        if: matrix.platform.os == 'windows'
        run: |
          mkdir -p "${HOME}/Downloads"
          cd "${HOME}/Downloads"
          wget https://golang.org/dl/go1.14.11.windows-amd64.zip
          unzip go1.14.11.windows-amd64.zip

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            vendor/nimbus-build-system/vendor/Nim/bin
            vendor/status-go/build/bin
          key: ${{ matrix.platform.os }}-${{ env.NPROC }}-nim-statusgo-${{ hashFiles('.gitmodules') }}

      - name: Install and build dependencies
        run: |
          make -j${NPROC} NIMFLAGS="--parallelBuild:${NPROC}" V=1 update
          make -j${NPROC} NIMFLAGS="--parallelBuild:${NPROC}" V=1 deps

      - name: Build and run tests
        if: matrix.platform.os != 'windows'
        run: |
          # test-nim and test-c can interfere with each other if run in
          # parallel so use `-j1` instead of `-j${NPROC}`
          make -j1 \
            NIMFLAGS="--parallelBuild:${NPROC}" \
            PCRE_INCLUDE_DIR="${{ matrix.platform.pcre_include }}" \
            PCRE_LIB_DIR="${{ matrix.platform.pcre_lib }}" \
            PCRE_STATIC=${{ matrix.pcre }} \
            SQLITE_STATIC=${{ matrix.sqlite }} \
            SSL_INCLUDE_DIR="${{ matrix.platform.ssl_include }}" \
            SSL_LIB_DIR="${{ matrix.platform.ssl_lib }}" \
            SSL_STATIC=${{ matrix.openssl }} \
            V=1 \
            test

      - name: Build and run tests (Windows)
        if: matrix.platform.os == 'windows'
        # specify `C:/msys64/` include/lib paths (via `cygpath -m`) to avoid
        # problems with msys2 path conversion
        run: |
          export GOROOT="${HOME}/Downloads/go"
          export PATH="${HOME}/Downloads/go/bin:${PATH}"
          # test-nim and test-c can interfere with each other if run in
          # parallel so use `-j1` instead of `-j${NPROC}`
          make -j1 \
            NIMFLAGS="--parallelBuild:${NPROC}" \
            PCRE_INCLUDE_DIR="$(cygpath -m ${{ matrix.platform.pcre_include }})" \
            PCRE_LIB_DIR="$(cygpath -m ${{ matrix.platform.pcre_lib }})" \
            PCRE_STATIC=${{ matrix.pcre }} \
            SQLITE_STATIC=${{ matrix.sqlite }} \
            SSL_INCLUDE_DIR="$(cygpath -m ${{ matrix.platform.ssl_include }})" \
            SSL_LIB_DIR="$(cygpath -m ${{ matrix.platform.ssl_lib }})" \
            SSL_STATIC=${{ matrix.openssl }} \
            V=1 \
            test
