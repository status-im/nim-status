name: Tests

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  tests:
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    name: ${{ matrix.platform }}

    steps:
      - name: Link Homebrew OpenSSL 1.1 to /usr/local/opt/openssl
        if: startsWith(matrix.platform, 'macos')
        shell: bash
        run: |
            rm -f /usr/local/opt/openssl
            ln -s /usr/local/opt/openssl@1.1 /usr/local/opt/openssl

      - name: Install Scoop
        if: startsWith(matrix.platform, 'windows')
        shell: powershell
        run: |
            iwr -useb get.scoop.sh | iex

      - name: Install external dependencies with Scoop
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          export PATH="${PATH}:${HOME}/scoop/shims"
          scoop install 7zip openssl-mingw wget

      - name: Fetch mingw build of libpcre
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          export PATH="${PATH}:${HOME}/scoop/shims"
          cd "${HOME}/Downloads"
          wget https://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-pcre-8.44-1-any.pkg.tar.xz
          7z x mingw*
          tar xvf mingw*.tar

      - name: Fetch prebuilt DLLs from nim-lang.org
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          export PATH="${PATH}:${HOME}/scoop/shims"
          cd "${HOME}/Downloads"
          mkdir -p dlls
          cd dlls
          wget https://nim-lang.org/download/dlls.zip
          unzip dlls.zip

      # Temporary workaround for: https://github.com/golang/go/issues/42565
      - name: Fetch Go v1.14.11
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          export PATH="${PATH}:${HOME}/scoop/shims"
          cd "${HOME}/Downloads"
          wget https://golang.org/dl/go1.14.11.windows-amd64.zip
          unzip go1.14.11.windows-amd64.zip

      - name: Checkout code
        uses: actions/checkout@v2

      # We need to do this because of how github cache works
      - name: Initialize submodules
        shell: bash
        run: |
          git submodule update --init --recursive

      - name: Cache Nim compiler, status-go
        uses: actions/cache@v2
        with:
          path: |
            vendor/nimbus-build-system/vendor/Nim/bin
            vendor/status-go/build/bin
          key: ${{ runner.os }}-nim-statusgo-${{ hashFiles('.gitmodules') }}

      - name: Install and build dependencies
        shell: bash
        run: |
          [[ ${{ matrix.platform }} = windows* ]] && export PATH="${HOME}/Downloads/go/bin:${PATH}:${HOME}/scoop/shims"
          export M="$(which mingw32-make || echo make)"
          "${M}" V=1 update
          "${M}" V=1 deps

      - name: Build and run tests (static)
        shell: bash
        run: |
          [[ ${{ matrix.platform }} = macos* ]] && \
            mkdir -p "${HOME}/.local/bin" && \
            cd "${HOME}/.local/bin" && \
            ln -f -s /usr/local/Cellar/llvm/*/bin/llvm-ar ./ar && \
            export PATH="$(pwd):${PATH}" && \
            cd - && \
            export PCRE_INCLUDE_DIR=/usr/local/opt/pcre/include && \
            export PCRE_LIB_DIR=/usr/local/opt/pcre/lib && \
            export SSL_INCLUDE_DIR=/usr/local/opt/openssl/include && \
            export SSL_LIB_DIR=/usr/local/opt/openssl/lib
          [[ ${{ matrix.platform }} = windows* ]] && \
            export GOROOT="${HOME}/Downloads/go" && \
            export PATH="${HOME}/Downloads/go/bin:${PATH}:${HOME}/scoop/shims" && \
            export PCRE_INCLUDE_DIR="${HOME}/Downloads/mingw64/include" && \
            export PCRE_LIB_DIR="${HOME}/Downloads/mingw64/lib" && \
            export SSL_INCLUDE_DIR="${HOME}/scoop/apps/openssl-mingw/current/include" && \
            export SSL_LIB_DIR="${HOME}/scoop/apps/openssl-mingw/current/lib"
          export M="$(which mingw32-make || echo make)"
          "${M}" \
             PCRE_INCLUDE_DIR="${PCRE_INCLUDE_DIR}" \
             PCRE_LIB_DIR="${PCRE_LIB_DIR}" \
             SSL_INCLUDE_DIR="${SSL_INCLUDE_DIR}" \
             SSL_LIB_DIR="${SSL_LIB_DIR}" \
             V=1 \
             test

      - name: Build and run tests (shared)
        shell: bash
        run: |
          rm -rf build nimcache test/c/build test/nim/build \
            vendor/nim-sqlcipher/nimcache \
            vendor/nim-sqlcipher/sqlcipher \
            vendor/nim-sqlcipher/sqlite
          [[ ${{ matrix.platform }} = macos* ]] && \
            mkdir -p "${HOME}/.local/bin" && \
            cd "${HOME}/.local/bin" && \
            ln -f -s /usr/local/Cellar/llvm/*/bin/llvm-ar ./ar && \
            export PATH="$(pwd):${PATH}" && \
            cd - && \
            export PCRE_LIB_DIR=/usr/local/opt/pcre/lib && \
            export SSL_INCLUDE_DIR=/usr/local/opt/openssl/include && \
            export SSL_LIB_DIR=/usr/local/opt/openssl/lib
          [[ ${{ matrix.platform }} = windows* ]] && \
            export GOROOT="${HOME}/Downloads/go" && \
            export PATH="${HOME}/Downloads/dlls:${HOME}/Downloads/go/bin:${PATH}:${HOME}/scoop/shims" && \
            export PCRE_LIB_DIR="${HOME}/Downloads/dlls" && \
            export SSL_INCLUDE_DIR="${HOME}/scoop/apps/openssl-mingw/current/include" && \
            export SSL_LIB_DIR="${HOME}/scoop/apps/openssl-mingw/current/lib"
          export M="$(which mingw32-make || echo make)"
          "${M}" \
            PCRE_LIB_DIR="${PCRE_LIB_DIR}" \
            PCRE_STATIC=false \
            SQLITE_STATIC=false \
            SSL_INCLUDE_DIR="${SSL_INCLUDE_DIR}" \
            SSL_LIB_DIR="${SSL_LIB_DIR}" \
            SSL_STATIC=false \
            V=1 \
            test
